Spring 4’s new @RestController annotation, which marks the class as a controller
where every method returns a domain object instead of a view.
It’s shorthand for @Controller and @ResponseBody rolled together.

The Java object must be converted to JSON.
Thanks to Spring’s HTTP message converter support, you don’t need to do this conversion manually.
Because Jackson 2 is on the classpath, Spring’s MappingJackson2HttpMessageConverter is automatically chosen
to convert the instance to JSON.

The controller methods return simple POJOs - Collection<Bookmark>, and Bookmark, etc.,.
When an HTTP request comes in that specifies an Accept header,
Spring MVC loops through the configured HttpMessageConverter`s
until it finds one that can convert from the POJO domain model types
into the content-type specified in the `Accept header,
if so configured. Spring Boot automatically wires up an
HttpMessageConverter that can convert generic Object s to JSON,
absent any more specific converter. HttpMessageConverter s work
in both directions: incoming requests bodies(content-type) are converted to Java objects,
and Java objects are converted into HTTP response bodies(Accept)